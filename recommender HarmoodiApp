import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import json
import random

class HarmoodiApp:
    def __init__(self, root):
        self.root = root
        self.root.title("HarmoodiApp")
        self.root.geometry("800x600")

        self.previous_page = None
        self.recommended_movies = set()
        self.recommended_books = set()
        self.recommended_music = set()

        #Load JSON file
        try:
            with open("assets/data.json", "r", encoding="utf-8") as file:
                self.data = json.load(file)
        except FileNotFoundError:
            print("Error: assets/data.json not found")
            self.data = {"movies": [], "books": [], "music": []}

        self.create_main_menu()

    def create_main_menu(self):
        #Create main menu interface
        self.previous_page = None
        self.recommended_movies.clear()
        self.recommended_books.clear()
        self.recommended_music.clear()

        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = ttk.Frame(self.root, padding=10)
        frame.pack(fill="both", expand=True)
        
        label = ttk.Label(frame, text="Choose your mood", font=("Times 22 italic"))
        label.pack(pady=10)
        
        moods = ["happy", "Broken", "terrifying", "alive", "in love"]
        for mood in moods:
            ttk.Button(frame, text=mood, command=lambda m=mood: self.show_category_selection(m)).pack(pady=5)

    def show_category_selection(self, mood):
        #Make category selection.
        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = ttk.Frame(self.root, padding=10)
        frame.pack(fill="both", expand=True)

        tk.Label(frame, text=f"Mood: {mood}", fg="purple", bg="white", font=("Times 15 italic")).pack(pady=8)
        tk.Label(frame, text="Select a category").pack()

        category_var = tk.StringVar()
        category_dropdown = ttk.Combobox(frame, textvariable=category_var, values=["movies", "books", "music"])
        category_dropdown.pack(pady=5)

        def continue_to_recommendations():
            selected_category = category_var.get().strip()
            if not selected_category:
                tk.Label(frame, text="Please select a valid category!", fg="purple", font=("Arial", 13, "bold")).pack()
                return
            self.show_recommendations(mood, selected_category)

        ttk.Button(frame, text="Continue", command=continue_to_recommendations).pack(pady=5)
        ttk.Button(frame, text="Go Back", command=self.create_main_menu).pack(pady=5)

    def show_recommendations(self, mood, category):
        #show recommended from the categories.
        for widget in self.root.winfo_children():
            widget.destroy()

        frame = ttk.Frame(self.root, padding=10)
        frame.pack(fill="both", expand=True)

        if category not in ["movies", "books", "music"]:
            tk.Label(frame, text="Please select a valid category!", fg="purple", bg="white").pack(pady=10)
            ttk.Button(frame, text="Back to Main Menu", command=self.create_main_menu).pack(pady=10)
            return

        filtered_items = [item for item in self.data[category] if mood in item.get("moods", [])]

        #Filter previously shown recommended 
        available_items = [
            item for item in filtered_items
            if item["title"] not in self.recommended_movies
            and item["title"] not in self.recommended_books
            and item["title"] not in self.recommended_music
        ]

        if not available_items:
            tk.Label(frame, text="There is no another recommends to show.", fg="red", font=("Arial", 14, "bold")).pack(pady=10)

            ttk.Button(frame, text="Go Back", command=lambda: self.show_category_selection(mood)).pack(pady=5)
            ttk.Button(frame, text="Back to Main Menu", command=self.create_main_menu).pack(pady=5)
            return

        item = random.choice(available_items)
        tk.Label(frame, text=f"{category.capitalize()} recommendation:", font=("Times 15 italic")).pack(pady=10)
        tk.Label(frame, text=item["title"], font=("Arial", 12, "bold")).pack(pady=5)

        # Ã–nerilenleri kaydet
        if category == "movies":
            self.recommended_movies.add(item["title"])
        elif category == "books":
            self.recommended_books.add(item["title"])
        elif category == "music":
            self.recommended_music.add(item["title"])

        ttk.Button(frame, text="See Details", command=lambda: self.show_details(item, category)).pack(pady=5)

        ttk.Button(frame, text="Go Back", command=lambda: self.show_category_selection(mood)).pack(pady=10)
        ttk.Button(frame, text="Back to Main Menu", command=self.create_main_menu).pack(pady=10)

    def show_details(self, item, category):
        #Show details to recommendations.
        self.previous_page = lambda: self.show_recommendations(item["moods"][0], category)

        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = ttk.Frame(self.root, padding=10)
        frame.pack(fill="both", expand=True)
        
        title = ttk.Label(frame, text=item["title"], font=("Arial", 16, "bold"))
        title.pack(pady=10)

        img_path = f"assets/images/{item.get('poster', 'default.jpg')}"
        
        try:
            img = Image.open(img_path)
            img = img.resize((300, 400))
            img = ImageTk.PhotoImage(img)
            poster_label = ttk.Label(frame, image=img)
            poster_label.image = img
            poster_label.pack(pady=10)
        except FileNotFoundError:
            ttk.Label(frame, text="Image not found!").pack(pady=10)
        
        summary = ttk.Label(frame, text=f"Summary: {item.get('summary', 'No Summary Available')}", wraplength=500)
        summary.pack(pady=5)
        
        if category == "movies":
            ttk.Label(frame, text=f"Actors: {', '.join(item.get('actors', ['Unknown']))}").pack(pady=5)
        elif category == "books":
            ttk.Label(frame, text=f"Author: {item.get('author', 'Unknown')}").pack(pady=5)
        elif category == "music":
            ttk.Label(frame, text=f"Singer: {item.get('singer', 'Unknown')}").pack(pady=5)
            
        ttk.Button(frame, text="Go Back", command=self.go_back).pack(pady=10)
        ttk.Button(frame, text="Back to Main Menu", command=self.create_main_menu).pack(pady=10)

    def go_back(self):
        #Go back to previous page.
        if self.previous_page:
            self.previous_page()

if __name__ == "__main__":
    root = tk.Tk()
    app = HarmoodiApp(root)
    root.mainloop()
